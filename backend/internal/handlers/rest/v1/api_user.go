/*
 * Ibis
 *
 * API for Ibis
 *
 * API version: 1.0.0
 * Contact: holmes89@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserApiController binds http requests to an api service and writes the service results to the http response
type UserApiController struct {
	service      UserApiServicer
	errorHandler ErrorHandler
}

// UserApiOption for how the controller is set up.
type UserApiOption func(*UserApiController)

// WithUserApiErrorHandler inject ErrorHandler into controller
func WithUserApiErrorHandler(h ErrorHandler) UserApiOption {
	return func(c *UserApiController) {
		c.errorHandler = h
	}
}

// NewUserApiController creates a default api controller
func NewUserApiController(s UserApiServicer, opts ...UserApiOption) Router {
	controller := &UserApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the UserApiController
func (c *UserApiController) Routes() Routes {
	return Routes{
		{
			"GetUserByName",
			strings.ToUpper("Get"),
			"/user/{username}",
			c.GetUserByName,
		},
		{
			"ListUserFriends",
			strings.ToUpper("Get"),
			"/user/{username}/friends",
			c.ListUserFriends,
		},
		{
			"ListUsers",
			strings.ToUpper("Get"),
			"/user",
			c.ListUsers,
		},
	}
}

// GetUserByName - Get user by user name
func (c *UserApiController) GetUserByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	usernameParam := params["username"]

	result, err := c.service.GetUserByName(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListUserFriends - lists users in system
func (c *UserApiController) ListUserFriends(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	usernameParam := params["username"]

	result, err := c.service.ListUserFriends(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListUsers - lists users in system
func (c *UserApiController) ListUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
